
function canvasApp() {

	if (!Modernizr.canvas) {
		return;
	}
	
	var theCanvas = document.getElementById("paillasse");
	var context = theCanvas.getContext("2d");
	
	init();
	var shapes;

	var dragIndex=0; //Pour éviter les shapes[dragIndex] undefined
	var dragging;
	var mouseX;
	var mouseY;
	var dragHoldX;
	var dragHoldY;
	
	var steps;
	var scenario;
	
	var microActive = 0;
	var sousMicro = "";
	
	
	function init() {
		shapes = [];
		scenario = new Scenario(scenarios[currentScen]);
		
		makeShapes(this.currentScen);
		//Initialise le pH des étiquettes à partir de leur nom
		initEtiquette();
		
		drawScreen(true);
		
		theCanvas.addEventListener("mousedown", mouseDownListener, false);
		theCanvas.addEventListener("mousemove", mouseMoveListener, false);
	}
	
	function mouseDownListener(evt) {
		if(microActive == 1)
		{
			microActive = 0;
			drawScreen(true);
		}
		else
		{
			drawScreen(false);
		}
	
		console.log("mouseDown");
		var i;
		//We are going to pay attention to the layering order of the objects so that if a mouse down occurs over more than object,
		//only the topmost one will be dragged.
		var highestIndex = -1;
		
		//getting mouse position correctly, being mindful of resizing that may have occured in the browser:
		var bRect = theCanvas.getBoundingClientRect();
		mouseX = (evt.clientX - bRect.left)*(theCanvas.width/bRect.width);
		mouseY = (evt.clientY - bRect.top)*(theCanvas.height/bRect.height);
				
		//find which shape was clicked
		for (i=0; i < shapes.length; i++) {
			if	(shapes[i].isDragable() && hitTest(shapes[i], mouseX, mouseY)) {
				dragging = true;
				if (i > highestIndex) {
					//We will pay attention to the point on the object where the mouse is "holding" the object:
					dragHoldX = mouseX - shapes[i].x;
					dragHoldY = mouseY - shapes[i].y;
					highestIndex = i;
					dragIndex = i;
					shapes[i].changeState('mouseDown'); 
				}
			}
		}
		theCanvas.removeEventListener("mousedown", mouseDownListener, false);
		window.addEventListener("mouseup", mouseUpListener, false);
		
		//réinitialise la position des objets non cliqués.
		for (i=0; i < shapes.length; i++){
			if(i!=dragIndex){
				shapes[i].reset();
				//shapes[i].drawElement();
			}
		}
		drawScreen();
		shapes[dragIndex].drawElement(); //Redessine l'élément qui a été draggé en dernier
		
		//code below prevents the mouse down from having an effect on the main browser window:
		if (evt.preventDefault) {
			evt.preventDefault();
		} //standard
		else if (evt.returnValue) {
			evt.returnValue = false;
		} //older IE
		return false;
	}
	
	function mouseUpListener(evt) {
		
		
	
		theCanvas.addEventListener("mousedown", mouseDownListener, false);
		window.removeEventListener("mouseup", mouseUpListener, false);
		if (dragging) {
			var bRect = theCanvas.getBoundingClientRect();
		mouseX = (evt.clientX - bRect.left)*(theCanvas.width/bRect.width);
		mouseY = (evt.clientY - bRect.top)*(theCanvas.height/bRect.height);
		for (i=0; i < shapes.length; i++) {
			if	(dragIndex!== i && hitTest(shapes[i], mouseX, mouseY)) {
					var message = shapes[dragIndex].id+" on "+shapes[i].id;
					scenario.signal(message);
					Animation(i);				
			}
		}
		
			shapes[dragIndex].changeState('mouseUp');
			shapes[dragIndex].drawElement(); 
			dragging = false;
		}
	}

	function mouseMoveListener(evt) {
		
		//getting mouse position correctly 
		var bRect = theCanvas.getBoundingClientRect();
		mouseX = (evt.clientX - bRect.left)*(theCanvas.width/bRect.width);
		mouseY = (evt.clientY - bRect.top)*(theCanvas.height/bRect.height);
		
		//Quand on bouge la souris, tout image grossis reprend sa taille initiale.
		//Si la souris est toujours au-dessus d'une image, on la regrossis dans la suite.
		degrossis();
		
		var element = document.getElementById("txtbox");
		if(element!=null){
			element.parentNode.removeChild(element);
		}
		
		if (dragging) {
			var posX;
			var posY;
			var shapeX = shapes[dragIndex].width;
			var shapeY = shapes[dragIndex].height;
			var minX = 0;
			var maxX = theCanvas.width - shapeX;
			var minY = 0;
			var maxY = theCanvas.height - shapeY;
			
			//clamp x and y positions to prevent object from dragging outside of canvas
			posX = mouseX - dragHoldX;
			posX = (posX < minX) ? minX : ((posX > maxX) ? maxX : posX);
			posY = mouseY - dragHoldY;
			posY = (posY < minY) ? minY : ((posY > maxY) ? maxY : posY);
		
			shapes[dragIndex].setPosition(posX,posY);
		
			for (i=0; i < shapes.length; i++) {
				if	(i!==dragIndex && hitTest(shapes[i], mouseX, mouseY)) {
					console.log("hovering "+shapes[i].id);
					///Note à mon moi du futur:
					///Si tu veux changer l'image de l'élément quand tu arrives dans une zone fais le ici
					///PS: ton moi du passé est vraiment trop fort!
					grossis(i);//Si l'on drag un objet au dessus d'un autre, on grossit celui du dessous.
				}
			}
			//On redessine l'écran
			drawScreen(false);
			//Puis l'image déplacée afin de s'assurer que celle-ci soit au dessus.
			shapes[dragIndex].drawElement();
		}else{
			
			for (i=0; i < shapes.length; i++) {
				if	(hitTest(shapes[i], mouseX, mouseY)) {
					var txtToTprint = shapes[i].nom;
					//Si la souris est au dessus d'un objet, on le grossis.
					grossis(i);
					if(txtToTprint){
						drawScreen(false);
						shapes[dragIndex].drawElement();
						var canvas = document.getElementById('paillasse');
						if (canvas.getContext)
						{    
							var boxsize = txtToTprint.length*13;
							var ctx = canvas.getContext('2d'); 
							ctx.font = "15pt Arial";
							ctx.strokeStyle = "rgb(250,250,250)";
							ctx.fillStyle = "rgb(250,250,250)";
					 		ctx.beginPath();
						 	  
						 	ctx.moveTo(mouseX, mouseY+5);
							ctx.lineTo(mouseX + boxsize, mouseY+5);
							ctx.lineTo(mouseX + boxsize, mouseY-20);
							ctx.lineTo(mouseX , mouseY-20);
							ctx.lineTo(mouseX , mouseY+5);
							ctx.fill();
							ctx.strokeStyle = "rgb(1,1,1)";
							ctx.fillStyle = "rgb(1,1,1)";
							ctx.stroke();
							ctx.strokeText(txtToTprint, mouseX+5, mouseY-5);
						} 
					}
					
				}
			}
			
		}
	}
		
	function hitTest(shape,mx,my) {		
		return ( mx > shape.x && mx < shape.x + shape.width && my > shape.y && my < shape.y + shape.height);	
	}

	function makeShapes(){
		var paillasseElements = elements;
		for(var i = 0, l = paillasseElements.length; i < l; ++i){
			var paillasseElem = paillasseElements[i];
			var tempShape = new PaillasseElem(paillasseElem,eval(paillasseElem+'Style'));  
			shapes.push(tempShape);
		}
		
		var paillasseZones = zones;
		for(var i = 0, l = paillasseZones.length; i < l; ++i){
			var paillasseZone = paillasseZones[i];
			var tempShape = new PaillasseZone(paillasseZone,eval(paillasseZone+'Style'));  
			shapes.push(tempShape);
		}
	}

	
	function drawShapes() {
		var i;
		for (i=0,l = shapes.length;i<l; i++) {
			(shapes[i]).drawElement();
		}
	}
	
	function drawScreen(initial) {
		var backgroundImage = new Image(); 
		
		backgroundImage.src = 'images/labo.jpg'; 
		console.log(backgroundImage.src);
		if(initial){
			backgroundImage.onload=function(){
				context.drawImage(backgroundImage, 0, 0);
				drawShapes();	
			}
		}
		context.drawImage(backgroundImage, 0, 0);
		if(microActive == 1){
			zone_microscope();
		}
		drawShapes();
	
	}
	
	//La fonction suivante décrit toutes les animations possibles.
	function Animation(i){
		if(shapes[i].id==="lavage"){
			lavage(dragIndex);
		}
		else if(shapes[dragIndex].id.substring(0,9)==="etiquette"){
			//Si l'élément déposé est une étiquette sur un élément, on change le pH a afficher.
			if(shapes[i].type==="elem"){
				changePh(i);			
			}
			else{
			//Sinon, le dépôt est effectué sur une zone, on remet l'étiquette à sa place.
				shapes[dragIndex].reset();
			}
		}
		else if(shapes[dragIndex].id==="phmetre"){
			if(shapes[i].type === "elem" && shapes[i].id.substring(0,9)!=="etiquette"){
			//Si le phmetre est déposé sur un élément qui n'est pas une étiquette,
				alert("pH de l'élément : "+shapes[i].trueph);
				console.log(shapes[i].nom +" de pH "+shapes[i].trueph);
				console.log(shapes[i].nom.substring(shapes[i].nom.length-1,shapes[i].nom.length));
				if(shapes[i].nom.substring(shapes[i].nom.length-1,shapes[i].nom.length)!==(""+shapes[i].trueph)){
					changeNom(i,shapes[i].nom + " de pH " + shapes[i].trueph);
				}
				shapes[dragIndex].reset();
			}
			else{
			//Sinon, le dépôt n'est pas valide.
				shapes[dragIndex].reset();
			}
		}
		else if(shapes[i].id === "microscope"){
			sousMicro = shapes[dragIndex].id;
			microActive = 1;
			drawScreen(false);
		}
		else if(shapes[dragIndex].id==="becher1" && shapes[i].id==="petri"){
			//animation de changement d'image.
			changeImage(dragIndex, "bunsen");
		}
		else if (shapes[dragIndex].id==="becher1" && shapes[i].id==="echantillon"){
			//animation d'ajout d'objet.
			ajoute("becher1",becher1Style);
		}
		else if(shapes[dragIndex].id==="flacon" && shapes[i].id==="tourie"){
			ajouteAndSet("flacon_plein",flacon_pleinStyle, shapes[dragIndex].x, shapes[dragIndex].y);
			supprime(dragIndex);
		}
		else if(shapes[dragIndex].id==="becher1" && shapes[i].id==="tourie"){
			ajouteAndSet("becher_eau1",becher_eau1Style, shapes[dragIndex].x, shapes[dragIndex].y);
			supprime(dragIndex);
		}
		else if(shapes[dragIndex].id==="becher2" && shapes[i].id==="tourie"){
			ajouteAndSet("becher_eau2",becher_eau2Style, shapes[dragIndex].x, shapes[dragIndex].y);
			supprime(dragIndex);
		}
		else if(shapes[dragIndex].id==="pipette_pasteur" && shapes[i].id==="algues"){
			ajouteAndSet("pipette_verte",pipette_verteStyle, shapes[dragIndex].x, shapes[dragIndex].y);
			supprime(dragIndex);
		}
		/*else if(shapes[dragIndex].id==="becher" && shapes[i].id==="microscope"){
			//animation de suppression
			supprime(dragIndex);
		}
		else if(shapes[dragIndex].id==="becher" && shapes[i].id==="petri"){
			//animation de changement d'image.
			changeImage(dragIndex, "bunsen");
		}
		else if (shapes[dragIndex].id==="becher" && shapes[i].id==="echantillon"){
			//animation d'ajout d'objet.
			ajoute("becher",becherStyle);
		}
		else if (shapes[dragIndex].id === "echantillon" && shapes[i].id === "microscope"){
			fusion(dragIndex,i,"becher",becherStyle);
		}
		else{
			//animation de base : décalage d'un des objets vers le bas.			
			shapes[dragIndex].setPosition(shapes[i].x,shapes[i].y);
			shapes[i].y += shapes[dragIndex].height;
		}*/
		drawScreen();
	}
	
	function supprime(i){
		console.log(i);
		shapes.splice(i,1);
	}
	
	function changeImage(i, source){
		var image = new Image();
    	image.onload = function() {
   		context.drawImage(image, shapes[i].x, shapes[i].y,50,50);
    	};
    	image.src = "./images/" + source + ".png";
    	shapes[dragIndex].imageObj = image;
	}
	
	function ajoute(id,style){
		//scenarios[currentScen].elements.push(id);
		var tempShape = new PaillasseElem(id,style);
		shapes.push(tempShape);
	}
	
	function ajouteAndSet(id,style, x, y){
		var tempShape = new PaillasseElem(id,style);
		tempShape.setPosition(x,y);
		tempShape.imageObj.onload = function() {
			context.drawImage(tempShape.imageObj, 
				tempShape.x, 
				tempShape.y,
				tempShape.width,
				tempShape.height);
		};
		shapes.push(tempShape);
	}
	
	function fusion(obj1,obj2, id,style){
		ajoute(id,style);
		supprime(obj1);
		supprime(obj2);
	}
	
	function zone_microscope(){
		//TODO get canvas size
		var sizeX = 1030;
		var microSizeX = 250;
		var microSizeY = 250;
		
		var canvas = document.getElementById('paillasse');
		var ctx = canvas.getContext('2d');
		
		var microImage = new Image(); 
		
		microImage.src = 'images/micro_'+ sousMicro+'.jpg'; 
		console.log(microImage.src);
		microImage.onload=function(){
			ctx.save();
			ctx.beginPath();
			ctx.arc(sizeX - (microSizeX/2), (microSizeX/2), (microSizeY/2), 0, Math.PI * 2, true);
			ctx.closePath();
			ctx.clip();

			ctx.drawImage(microImage, sizeX-microSizeX, 0, microSizeX, microSizeY);
			
		    ctx.beginPath();
			ctx.arc(0, 0, 25, 0, Math.PI * 2, true);
			ctx.clip();
			ctx.closePath();
			ctx.restore();
		};
		
		
		if (canvas.getContext)
		{    
			var ctx = canvas.getContext('2d'); 
			
			ctx.strokeStyle = "rgb(0,0,0)";
			ctx.fillStyle = "rgb(0,0,0)";
	 		ctx.beginPath();
		 	  
		 	ctx.moveTo(sizeX, 0);
			ctx.lineTo(sizeX, microSizeY);
			ctx.lineTo(sizeX - microSizeX, microSizeY);
			ctx.lineTo(sizeX - microSizeX, 0);
			ctx.lineTo(sizeX, 0);
			ctx.fill();//s'il te plait dessine moi un carré
			
		}
	}
	
	//effectue le lavage
	function lavage(i){
		console.log(shapes[i].id);
		if(shapes[i].parent == 0){
			//remettre l'élément
			//ajoute("becher1",becher1Style);
			ajoute(shapes[i].id, eval(shapes[i].id+"Style"));
		}
		else {
			//mettre son parent
			//changeImage(i, parent);
			console.log(shapes[i].parent);
			ajoute(shapes[i].parent, eval(shapes[i].parent+"Style"));
		}
		supprime(i);
	}
	
	function grossis(i,gros){
		if(shapes[i].gros===false){
			shapes[i].height += 10;
			shapes[i].width += 10;
			drawScreen();
			shapes[i].gros=true;
		}
	}
	
	function degrossis() {
		var i;
		for(i=0; i<shapes.length; i++){
			if(shapes[i].gros === true){
				shapes[i].height = shapes[i].heightOrig;
				shapes[i].width =  shapes[i].widthOrig;
				shapes[i].gros = false;
			}
		}
	}
	
	function changeNom(i,nom){
		shapes[i].nom=nom;
	}
	
	function initEtiquette(){
		for(i=0;i<shapes.length;i++){
			if(shapes[i].id.substring(0,9)==="etiquette"){
				console.log(shapes[i].id.substring(11,13));
				shapes[i].ph=shapes[i].id.substring(11,13);
			}
		}
	}
	
	function changePh(i){
		if(shapes[i].type === "elem" && shapes[i].ph<0){
				//console.log(shapes[i].nom + shapes[dragIndex].nom.substring(9,15));
				changeNom(i,shapes[i].nom + " etiqueté");
				//changeNom(i,shapes[i].nom + shapes[dragIndex].nom.substring(9,15)); // Pour la textbox.
				shapes[i].ph=shapes[dragIndex].ph;
				shapes[dragIndex].reset();
			}
			else if(shapes[i].type === "elem" && shapes[i].id.substring(0,9)!=="etiquette"){
				//changeNom(i,shapes[i].nomOrig);
				//console.log(shapes[i].nom + shapes[dragIndex].nom.substring(9,15));
				changeNom(i,shapes[i].nom + " etiqueté");
				changeNom(i,shapes[i].nom + shapes[dragIndex].nom.substring(9,15)); // Pour la textbox.
				shapes[i].ph=shapes[dragIndex].ph;
				shapes[dragIndex].reset();
			}
			//console.log(""+shapes[i].trueph+","+shapes[i].ph);
			if(shapes[i].ph==shapes[i].trueph){
				console.log("Alerte !");
				alert("Bien joué !");
			}
			else{
				alert("Mauvais pH!");
			}
	}
}
